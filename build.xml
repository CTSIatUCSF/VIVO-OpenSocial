<?xml version="1.0"?>

<!--
Copyright (c) 2012, Cornell University
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.
    * Neither the name of Cornell University nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<!-- ====================================================================== 
	 Build script for the NIH VIVO product.
	 
	 The deploy.properties file contains both build properties and runtime 
	 properties.
	     
	 The required build properties are:
	 	vitroCore.dir
	    tomcat.home
	    webapp.name
	     ====================================================================== -->
<project name="nihvivo" default="describe">

	<!-- 
		The build directory goes in the product directory. 
		Everything else hangs from the build directory. 
	-->
	<property name="build.dir" location="./.build" />
	<property name="appbase.dir" location="${build.dir}/appBase" />

	<!--
		Load the properties from deploy.properties.
	-->
	<property name="deploy.properties.file" location="deploy.properties" />
	<fail message="You must create a &quot;${deploy.properties.file}&quot; file.">
		<condition>
			<not>
				<available file="${deploy.properties.file}" />
			</not>
		</condition>
	</fail>
	<property file="${deploy.properties.file}" />
	<fail unless="vitro.core.dir" message="${deploy.properties.file} must contain a value for vitro.core.dir" />

	<!--
		Base it all on the core build file. 
	-->
	<import file="${vitro.core.dir}/webapp/build.xml" />

	<!-- - - - - - - - - - - - - - - - - - 
          target: prepare                      
          
          Override the core version, so we can merge the two levels before building.                      
         - - - - - - - - - - - - - - - - - -->
	<target name="prepare" depends="compileUtilities,product-prepare,vitroCore.prepare" />

	<!-- - - - - - - - - - - - - - - - - - 
          target: product-prepare                      
         - - - - - - - - - - - - - - - - - -->
	<target name="product-prepare">
		<mkdir dir="${appbase.dir}" />
		<mkdir dir="${appbase.dir}/web" />

		<copy todir="${appbase.dir}/web" includeemptydirs="true">
			<fileset dir="${corebase.dir}/web">
				<not>
					<present targetdir="./productMods" />
				</not>
			</fileset>
			<fileset dir="./productMods" />
		</copy>

		<patternset id="appbase.patterns">
			<include name="src/**/*" />
			<include name="lib/**/*" />
			<include name="test/**/*" />
			<include name="themes/**/*" />
			<include name="config/*.properties" />
			<include name="config/*.txt" />
			<include name="config/jarlist/*.txt" />
			<include name="config/solr/*" />
			<include name="context.xml" />
		</patternset>

		<copy todir="${appbase.dir}" includeemptydirs="true">
			<fileset dir="${corebase.dir}/">
				<patternset refid="appbase.patterns" />
				<exclude name="themes/**/*" if="skip.core.themes" />
				<not>
					<present targetdir="." />
				</not>
			</fileset>
			<fileset dir=".">
				<patternset refid="appbase.patterns" />
			</fileset>
		</copy>
	</target>

	<import file="${vitro.core.dir}/webapp/build.xml" />

	<!-- ================================= 
	      target: revisionInfo              
	     
	      Override the core version, to get the 2-level effect.                      
	     ================================= -->
	<target name="revisionInfo" depends="vitroCore.revisionInfo" description="--> Store revision info in build">
		<addRevisionInfoLine productName="${ant.project.name}" productCheckoutDir="${basedir}" />
	</target>

	<!-- ================================= 
          target: licenser             
          
          In regular use, checks that all appropriate source files have license tags.
          At release time, applies license text to source files.
          The files are handled as properties so they can be overridden from the command line, if desired.
	     
	      Override the core version, to get the 2-level effect.                      
         ================================= -->
	<target name="licenser" description="--> Check source files for licensing tags">
		<property name="licenser.product.properties.file" location="./config/licenser/licenser.properties" />
		<property name="licenser.core.properties.file" location="${corebase.dir}/config/licenser/licenser.properties" />
		<runLicenserScript productname="${ant.project.name}" propertiesfile="${licenser.product.properties.file}" />
		<runLicenserScript productname="Vitro core" propertiesfile="${licenser.core.properties.file}" />
	</target>

	<!-- ================================= 
          target: acceptance              
         ================================= -->
	<target name="acceptance" description="--> Run the Selenium acceptance tests.">
		<ant dir="${vitro.core.dir}/utilities/testrunner" target="run" inheritall="false">
			<property name="acceptance.dir" location="${basedir}/utilities/acceptance-tests" />
			<property name="acceptance.batch" value="${acceptance.batch}" />
		</ant>
	</target>

</project>
