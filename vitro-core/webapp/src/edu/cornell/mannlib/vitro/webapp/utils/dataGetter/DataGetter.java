/*
Copyright (c) 2012, Cornell University
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.
    * Neither the name of Cornell University nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
package edu.cornell.mannlib.vitro.webapp.utils.dataGetter;

import java.util.Map;

/**
 * A class to get data based on configurations in RDF. These are useful for pages bug not specific to pages.
 * Consider using this interface when you need data based on RDF configuration.  
 * 
 * Instances should be short-lived, and only used on a single HTTP request. The getData method accepts only 
 * a value map, so if stat is required from the request (or the servlet context), the request should be 
 * passed to the constructor.
 * 
 * Constructors:  Objects that implement this interface will be constructed by reflection with the following 
 * constructor signatures in the following order:
 *  DataGetter( VitroRequest vreq, Model displayModel, String dataGetterURI )
 *  DataGetter( Model displayModel, String dataGetterURI )
 *  DataGetter( VitroRequest vreq )
 *  DataGetter()
 *  
 * The main difference between this and PageDataGetter is that these are configured not based on page URI 
 * but on DataGetter URI.  This allows a configuration of a DataGetter to be used in multiple situations. 
 * The DataGetter is not passed information about what page it might be associated with.
 * 
 * Using this interface is preferred over PageDataGetter because then the DataGetter can be associated with 
 * things other than pages. 
 * 
 */
public interface DataGetter {

	/**
	 * Get data. Throwing an Exception is acceptable.
	 * 
	 * @param valueMap
	 *            any values already generated by data getters or the controller. 
	 *            Might be immutable, and should not be modified within the method.
	 * 
	 * @return data to add to valueMap. Might be empty, but should not be null.
	 */
    Map<String,Object> getData( Map<String, Object> valueMap );       

}
